list.files()
list.dirs()
list.files()
setwd('~/Coursera/DataProducts/app/')
list.files()
# load the necessary packages
library(shiny)
library(RCurl)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
rx.df$PrescriptionSpending <- rx.df$Total.Spending
rx.df$Key <- 'TopPrescriptions'
rx.df <- rx.df[rx.df$Year < 2014, ]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.in.df$InPatientSpending <- with(med.in.df, Total.Discharges*Average.Medicare.Payments)
med.in.df$Key <- 'InPatient'
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
med.out.df$OutPatientSpending <- with(med.out.df, Outpatient.Services*Average.Total.Payments)
med.out.df$Key <- 'OutPatient'
url <- 'http://www.census.gov/popest/data/state/asrh/2015/files/SCPRC-EST2015-18+POP-RES.csv'
pop <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
pop <- read.csv(text=pop)
state.summary <- data.frame(StateAbb = state.abb, StateName = state.name)
pop <- merge(state.summary, pop, by.x='StateName', by.y='NAME')
colnames(pop)[grep('POPEST18PLUS2015', colnames(pop))] <- 'Population'
source('outputCareCategories.R')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bioaimie', token='99DDB64EF1F27243DE4EE76DE7220F1D', secret='6wPdfz52vZUipIZOS3jDtkOCPxeAlfpxToXMpXot')
library(rsconnect)
rsconnect::deployApp('~/Coursera/DataProducts/app/')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
runApp()
head(med.in.df)
grep('extracranial procedures')
grep('extracranial procedures', med.in.df[,'Category'])
med.in.df[grep('extracranial procedures', med.in.df[,'Category']),]
med.in.df[grep('extracranial procedures', med.in.df[,'Category']),]
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
runApp()
a <- merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
head(a)
filterCategory(a, 'extracranial procedures')
runApp()
head(a)
b <- a[a$Category == 'transient ischemia', ]
head(b)
gvisGeoChart(b, locationvar='Provider.State', colorvar='InPatientSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}"))
plot(gvisGeoChart(b, locationvar='Provider.State', colorvar='InPatientSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}")))
head(a)
runApp()
runApp()
runApp()
runApp()
runApp()
head(med.in.df)
cbind((merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), with((merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), InpatientSpending/Population))
cbind(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'),with(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), InPatientSpending/Population))
c <- cbind(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'),with(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), InPatientSpending/Population))
head(c)
runApp()
head(a)
3005712/552166
3005712/552166*100
3005712/552166*1000
runApp()
runApp()
runApp()
runApp()
head(a)
head(b)
head(b)
head(b)
head(c)
colnames(c)[5]
colnames(c)[5] <- 'PerCapitaSpending'
gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}"), markers = format('$###,###.##'))
gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", vAxis="{format:'$###,###.##}"))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", vAxis="{format:'$###,###.##}")))
head(c)
head)c
head(c)
c <- c[c$Category == 'g.i. hemorrhage', ]
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", vAxis="{format:'$###,###.##}")))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}"))
)
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", formats="{'$###,###.##}")))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", vAxis="{format:'$###,###.##}")))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", hAxis="{format:'$###,###.##}")))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", text="{format:'$###,###.##}")))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", labels="{format:'$###,###.##}")))
plot(gvisGeoChart(c, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}", markers="{format:'$###,###.##}")))
runApp()
rm(a,b,c)
runApp()
runApp()
a <- merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
head(a)
a$PerCapitaSpending <- round(a$OutPatientSpending/a$Population*1000,2)
head(a)
a <- a[a$Category == 'endoscopy upper airway']
a <- a[a$Category == 'endoscopy upper airway', ]
a
a <- a[a$Category == 'endoscopy upper airway', ]
gvisGeoChart(a, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}"))
plot(gvisGeoChart(a, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}")))
runApp()
runApp()
head(a)
head(rx.df)
# set working directory... take this out when the app goes live
setwd('~/Coursera/DataProducts/app')
# load the necessary packages
library(shiny)
library(RCurl)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
colnames(rx.df)[grep('Total.Spending',colnames(rx.df))] <- 'PrescriptionSpending'
rx.df$Key <- 'TopPrescriptions'
rx.df <- rx.df[rx.df$Year < 2014, ]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.in.df$InPatientSpending <- with(med.in.df, Total.Discharges*Average.Medicare.Payments)
med.in.df$Key <- 'InPatient'
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
med.out.df$OutPatientSpending <- with(med.out.df, Outpatient.Services*Average.Total.Payments)
med.out.df$Key <- 'OutPatient'
url <- 'http://www.census.gov/popest/data/state/asrh/2015/files/SCPRC-EST2015-18+POP-RES.csv'
pop <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
pop <- read.csv(text=pop)
state.summary <- data.frame(StateAbb = state.abb, StateName = state.name)
pop <- merge(state.summary, pop, by.x='StateName', by.y='NAME')
colnames(pop)[grep('POPEST18PLUS2015', colnames(pop))] <- 'Population'
source('outputCareCategories.R')
source('filterCategory.R')
runApp()
runApp()
runApp()
runApp()
runApp()
b <- filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'),'debridement & destruction')
b$PerCapitaSpending <- round(b$OutPatientSpending/b$Population*1000,2)
head(b)
plot(gvisGeoChart(b, locationvar='Provider.State', colorvar='PerCapitaSpending', options = list(region='US', displayMode='regions', resolution='provinces', colorAxis="{colors:['#FFFFFF','#0000FF']}")))
runApp()
runApp()
head(rx.df)
runApp()
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
rm(b)
runApp()
runApp()
runApp()
runApp(display.mode='showcase')
runApp(display.mode = 'showcase')
runApp()
head(rx.df)
unique(rx.df$Category)
head(rx.df)
gvisPieChart(subset(rx.df, Year==2010), labelvar='Category', numvar='PrescriptionSpending')
plot(gvisPieChart(subset(rx.df, Year==2010), labelvar='Category', numvar='PrescriptionSpending'))
head(CityPopularity)
head(rx.df)
plot(gvisPieChart(rx.df[rx.df$Year==2010, c('Category','PrescriptionSpending')])
)
plot(gvisPieChart(with(rx.df[rx.df$Year==2010, c('Category','PrescriptionSpending')], aggregate(PrescriptionSpending~Category, FUN=sum)))
plot(gvisPieChart(with(rx.df[rx.df$Year==2010, c('Category','PrescriptionSpending')], aggregate(PrescriptionSpending~Category, FUN=sum))))
plot(gvisPieChart(with(rx.df[rx.df$Year==2010, c('Category','PrescriptionSpending')], aggregate(PrescriptionSpending~Category, FUN=sum))))
gvisLineChart(subset(rx.df, Year==2010), xvar='Year', yvar='PrescriptionSpending', chartid = 'Category')
plot(gvisLineChart(subset(rx.df, Year==2010), xvar='Year', yvar='PrescriptionSpending', chartid = 'Category'))
plot(gvisLineChart(subset(rx.df, Category=='Chemotherapy'), xvar='Year', yvar='PrescriptionSpending', chartid = 'Category'))
plot(gvisLineChart(with(subset(rx.df, Category=='Chemotherapy'), aggregate(PrescriptionSpending~Year, FUN=sum)), xvar='Year', yvar='PrescriptionSpending', chartid = 'Category'))
with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum))
filterCategory(with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum)), 'Chemotherapy', FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(rx.df)
a <- with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum))
a <- a[a$Category == 'Chemotherapy', ]
gvisTable(a, options = list(width=1000), formats=list(Year='####', PrescriptionSpending='$###,###,###'))
plot(gvisTable(a, options = list(width=1000), formats=list(Year='####', PrescriptionSpending='$###,###,###')))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(a)
class(a$Category)
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
runApp()
rm(a)
runApp(display.mode = 'showcase')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(display.mode = 'showcase')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(med.in)
head(med.in.df)
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
runApp()
head(rx.df)
filterCategory(with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum)), 'Mental Health')
runApp()
runApp()
runApp()
runApp()
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures', TRUE)
with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum))
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures', TRUE)
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures', TRUE)
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures', TRUE)
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures', TRUE)
a <- filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures', TRUE)
head(a)
class(a$TotalSpending)
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures')
filterCategory(with(med.in.df, aggregate(InPatientSpending~Year+Category, FUN=sum)), 'extracranial procedures')
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Coursera/DataProducts/app/filterCategory.R', echo=TRUE)
source('~/Coursera/DataProducts/app/outputCareCategories.R', echo=TRUE)
runApp(display.mode = 'showcase')
runApp()
filterCategory(with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum)), 'Chemotherapy')
runApp()
filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'debridement & destruction', TRUE)
a <- filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'debridement & destruction', TRUE)
head(a)
head(med.out.df)
runApp()
View(med.in.df)
filterCategory(med.in.df, 'extracranial procedures')
a <- filterCategory(med.in.df, 'extracranial procedures')
head(a)
runApp()
runApp()
runApp()
runApp()
runApp()
filterCategory(with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum)), 'Chemotherapy')
runApp()
runApp()
runApp()
head(rx.df)
runApp()
runApp()
rm(a)
runApp()
runApp()
runApp()
filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'extracranial procedures')
filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'extracranial procedure')
filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'debridement & destruction')
filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'debridement & destruction')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# load the necessary packages
library(shiny)
library(RCurl)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
colnames(rx.df)[grep('Total.Spending',colnames(rx.df))] <- 'PrescriptionSpending'
rx.df$Key <- 'TopPrescriptions'
rx.df <- rx.df[rx.df$Year < 2014, ]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.in.df$InPatientSpending <- with(med.in.df, Total.Discharges*Average.Medicare.Payments)
med.in.df$Key <- 'InPatient'
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
med.out.df$OutPatientSpending <- with(med.out.df, Outpatient.Services*Average.Total.Payments)
med.out.df$Key <- 'OutPatient'
url <- 'http://www.census.gov/popest/data/state/asrh/2015/files/SCPRC-EST2015-18+POP-RES.csv'
pop <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
pop <- read.csv(text=pop)
state.summary <- data.frame(StateAbb = state.abb, StateName = state.name)
pop <- merge(state.summary, pop, by.x='StateName', by.y='NAME')
colnames(pop)[grep('POPEST18PLUS2015', colnames(pop))] <- 'Population'
source('outputCareCategories.R')
source('filterCategory.R')
runApp()
runApp()
runApp()
runApp()
w <- 800
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# set working directory... take this out when the app goes live
# setwd('~/Coursera/DataProducts/app')
# load the necessary packages
library(shiny)
library(RCurl)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
colnames(rx.df)[grep('Total.Spending',colnames(rx.df))] <- 'PrescriptionSpending'
rx.df$Key <- 'TopPrescriptions'
rx.df <- rx.df[rx.df$Year < 2014, ]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.in.df$InPatientSpending <- with(med.in.df, Total.Discharges*Average.Medicare.Payments)
med.in.df$Key <- 'InPatient'
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
med.out.df$OutPatientSpending <- with(med.out.df, Outpatient.Services*Average.Total.Payments)
med.out.df$Key <- 'OutPatient'
url <- 'http://www.census.gov/popest/data/state/asrh/2015/files/SCPRC-EST2015-18+POP-RES.csv'
pop <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
pop <- read.csv(text=pop)
state.summary <- data.frame(StateAbb = state.abb, StateName = state.name)
pop <- merge(state.summary, pop, by.x='StateName', by.y='NAME')
colnames(pop)[grep('POPEST18PLUS2015', colnames(pop))] <- 'Population'
w <- 800
source('outputCareCategories.R')
source('filterCategory.R')
myNum=1111
paste("$",format(myNum, big.mark=","),sep="")
source('~/Documents/Coursera Data Science/DataProducts/app/trimForTable.R', echo=TRUE)
filterCategory(with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum)), 'Chemotherapy')
a <-filterCategory(with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum)), 'Chemotherapy')
trimForTable(a)
trimForTable(a)
source('~/Documents/Coursera Data Science/DataProducts/app/trimForTable.R', echo=TRUE)
trimForTable(a)
filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'debridement & destruction', TRUE)
a <- filterCategory(merge(with(med.out.df, aggregate(OutPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'), 'debridement & destruction', TRUE)
head(a)
trimForTable(a)
source('~/Documents/Coursera Data Science/DataProducts/app/trimForTable.R', echo=TRUE)
trimForTable(a)
trimForTable(a)
