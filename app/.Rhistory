startYear <- min(sealbar.prod[,'Year'])
startWeek <- min(sealbar.prod[optics.prod[,'Year'] == startYear,'Week'])
startDate.sealbar <- ifelse(startWeek < 10, paste(startYear, startWeek, sep='-0'), paste(startYear, startWeek, sep='-'))
sealbar.prod <- merge(calendar.df[calendar.df[,'YearWeek'] >= startDate.sealbar, ], sealbar.prod, by=c('Year','Week'), all.x =TRUE)
sealbar.prod.agg <- with(sealbar.prod, aggregate(cbind(flukeTemp, intercept, slope)~YearWeek, FUN=mean))
colnames(sealbar.prod.agg) <- c('YearWeek','flukeTemp_avg', 'intercept_avg','slope_avg')
sealbar.prod <- merge(sealbar.prod, sealbar.prod.agg, by='YearWeek', all.x=TRUE)
dateBreaks <- as.character(unique(sealbar.prod[,'YearWeek']))
if(length(dateBreaks) < 52) {
dateBreaks <- dateBreaks[order(dateBreaks)][seq(1, length(dateBreaks), 6)]
} else {
dateBreaks <- dateBreaks[order(dateBreaks)][seq(1, length(dateBreaks), 12)]
}
p.sealbar.fluke <- ggplot(sealbar.prod, aes(x=YearWeek, y=flukeTemp)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=flukeTemp_avg), data=sealbar.prod, color='blue', size=2) + geom_line(aes(x=YearWeek, y=flukeTemp_avg, group=1), data=sealbar.prod, color='black') + scale_x_discrete(breaks = dateBreaks) + labs(title='Sealbar Calibration in Instrument Production:\nFluke Temperature', x='Year-Week', y='Individual Values, Weekly Average') + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1))
p.sealbar.int <- ggplot(sealbar.prod, aes(x=YearWeek, y=intercept)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=intercept_avg), data=sealbar.prod, color='blue', size=2) + geom_line(aes(x=YearWeek, y=intercept_avg, group=1), data=sealbar.prod, color='black') + scale_x_discrete(breaks = dateBreaks) + labs(title='Sealbar Calibration in Instrument Production:\nThermocouple Intercept', x='Year-Week', y='Individual Values, Weekly Average') + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1))
p.sealbar.slope <- ggplot(sealbar.prod, aes(x=YearWeek, y=slope)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=slope_avg), data=sealbar.prod, color='blue', size=2) + geom_line(aes(x=YearWeek, y=slope_avg, group=1), data=sealbar.prod, color='black') + scale_x_discrete(breaks = dateBreaks) + labs(title='Sealbar Calibration in Instrument Production:\nThermocouple Slope', x='Year-Week', y='Individual Values, Weekly Average') + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1))
p.sealbar.fluke.box <- ggplot(sealbar.prod, aes(x=YearWeek, y=flukeTemp)) + geom_boxplot(color='dodgerblue', outlier.colour = 'orange') + scale_x_discrete(breaks = dateBreaks) + labs(title='Sealbar Calibration in Instrument Production:\nFluke Temperature', x='Year-Week', y='Distribution of Test Values') + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1))
p.sealbar.int.box <- ggplot(sealbar.prod, aes(x=YearWeek, y=intercept)) + geom_boxplot(color='dodgerblue', outlier.colour = 'orange') + scale_x_discrete(breaks = dateBreaks) + labs(title='Sealbar Calibration in Instrument Production:\nThermocouple Intercept', x='Year-Week', y='Distribution of Test Values') + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1))
p.sealbar.slope.box <- ggplot(sealbar.prod, aes(x=YearWeek, y=slope)) + geom_boxplot(color='dodgerblue', outlier.colour = 'orange') + scale_x_discrete(breaks = dateBreaks) + labs(title='Sealbar Calibration in Instrument Production:\nThermocouple Slope', x='Year-Week', y='Distribution of Test Values') + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1))
# Temperature Calibration ----------------------------------------------------------------------------------------------
temp.prod <- subset(temp.df, Location == 'Production')
startYear <- min(temp.prod[,'Year'])
startWeek <- min(temp.prod[temp.prod[,'Year'] == startYear,'Week'])
startDate.temp <- ifelse(startWeek < 10, paste(startYear, startWeek, sep='-0'), paste(startYear, startWeek, sep='-'))
# because there are a whole lot of tests involved and they are all stacked by Test name, iterate to make a calendar
tests <- as.character(unique(temp.prod[,'Test']))
temp.prod.fill <- c()
for(i in 1:length(tests)) {
test <- tests[i]
target <- as.numeric(as.character(unique(temp.prod[temp.prod[,'Test'] == test, 'Target'])))
temp <- temp.prod[temp.prod[,'Test'] == test, ]
temp <- merge(calendar.df[calendar.df[,'YearWeek'] >= startDate.temp, ], temp, by=c('Year','Week'), all.x =TRUE)
temp[is.na(temp[,'Test']),'Test'] <- test
temp[is.na(temp[,'Target']),'Target'] <- target
temp.prod.fill <- rbind(temp.prod.fill, temp)
}
temp.prod.agg <- with(temp.prod.fill, aggregate(cbind(ThermoCouple, Instrument, Error)~YearWeek+Test, FUN=mean))
colnames(temp.prod.agg) <- c('YearWeek','Test','ThermoCouple_avg', 'Instrument_avg','Error_avg')
temp.prod <- merge(temp.prod.fill, temp.prod.agg, by=c('YearWeek','Test'), all.x=TRUE)
dateBreaks <- as.character(unique(temp.prod[,'YearWeek']))
if(length(dateBreaks) < 52) {
dateBreaks <- dateBreaks[order(dateBreaks)][seq(1, length(dateBreaks), 6)]
} else {
dateBreaks <- dateBreaks[order(dateBreaks)][seq(1, length(dateBreaks), 12)]
}
temp.prod[,'TestType'] <- substr(temp.prod[,'Test'], 1, 4)
# make charts for individual tests... maybe this could be consolidated if Greg is cool with it
# p.grid <- ggplot(temp.prod, aes(x=YearWeek, y=ThermoCouple)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=ThermoCouple_avg), data=temp.prod, color='blue', size=2) + geom_line(aes(x=YearWeek, y=ThermoCouple_avg, group=1), data=temp.prod, color='black') + facet_grid(Target~TestType, scale='free_y') + geom_hline(aes(yintercept=Target), color='black')
# PCR1 - 50
pcr1.50.inst <- subset(temp.prod, Test=='PCR1_50')[,c('YearWeek','Target','Instrument','Instrument_avg')]; pcr1.50.inst$Key <- 'Instrument Temperature'; colnames(pcr1.50.inst) <- c('YearWeek','Target','Value','Average','Key')
pcr1.50.err <- subset(temp.prod, Test=='PCR1_50')[,c('YearWeek','Target','Error','Error_avg')]; pcr1.50.err$Key <- 'Temperature Error'; colnames(pcr1.50.err) <- c('YearWeek','Target','Value','Average','Key')
pcr1.50 <- rbind(pcr1.50.inst, pcr1.50.err)
pcr1.50[,'Target'] <- with(pcr1.50, ifelse(Key=='Temperature Error', NA, Target))
p.pcr1.50 <- ggplot(pcr1.50, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=pcr1.50, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=pcr1.50, color='black') + geom_hline(aes(yintercept=Target), color='black', data=pcr1.50, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 50 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR1 - 60
pcr1.60.inst <- subset(temp.prod, Test=='PCR1_60')[,c('YearWeek','Target','Instrument','Instrument_avg')]; pcr1.60.inst$Key <- 'Instrument Temperature'; colnames(pcr1.60.inst) <- c('YearWeek','Target','Value','Average','Key')
pcr1.60.err <- subset(temp.prod, Test=='PCR1_60')[,c('YearWeek','Target','Error','Error_avg')]; pcr1.60.err$Key <- 'Temperature Error'; colnames(pcr1.60.err) <- c('YearWeek','Target','Value','Average','Key')
pcr1.60 <- rbind(pcr1.60.inst, pcr1.60.err)
pcr1.60[,'Target'] <- with(pcr1.60, ifelse(Key=='Temperature Error', NA, Target))
p.pcr1.60 <- ggplot(pcr1.60, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=pcr1.60, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=pcr1.60, color='black') + geom_hline(aes(yintercept=Target), color='black', data=pcr1.60, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 60 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR1 - 70
pcr1.70.inst <- subset(temp.prod, Test=='PCR1_70')[,c('YearWeek','Target','Instrument','Instrument_avg')]; pcr1.70.inst$Key <- 'Instrument Temperature'; colnames(pcr1.70.inst) <- c('YearWeek','Target','Value','Average','Key')
pcr1.70.err <- subset(temp.prod, Test=='PCR1_70')[,c('YearWeek','Target','Error','Error_avg')]; pcr1.70.err$Key <- 'Temperature Error'; colnames(pcr1.70.err) <- c('YearWeek','Target','Value','Average','Key')
pcr1.70 <- rbind(pcr1.70.inst, pcr1.70.err)
pcr1.70[,'Target'] <- with(pcr1.70, ifelse(Key=='Temperature Error', NA, Target))
p.pcr1.70 <- ggplot(pcr1.70, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=pcr1.70, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=pcr1.70, color='black') + geom_hline(aes(yintercept=Target), color='black', data=pcr1.70, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 70 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR1 - 80
pcr1.80.inst <- subset(temp.prod, Test=='PCR1_80')[,c('YearWeek','Target','Instrument','Instrument_avg')]; pcr1.80.inst$Key <- 'Instrument Temperature'; colnames(pcr1.80.inst) <- c('YearWeek','Target','Value','Average','Key')
pcr1.80.err <- subset(temp.prod, Test=='PCR1_80')[,c('YearWeek','Target','Error','Error_avg')]; pcr1.80.err$Key <- 'Temperature Error'; colnames(pcr1.80.err) <- c('YearWeek','Target','Value','Average','Key')
pcr1.80 <- rbind(pcr1.80.inst, pcr1.80.err)
pcr1.80[,'Target'] <- with(pcr1.80, ifelse(Key=='Temperature Error', NA, Target))
p.pcr1.80 <- ggplot(pcr1.80, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=pcr1.80, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=pcr1.80, color='black') + geom_hline(aes(yintercept=Target), color='black', data=pcr1.80, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 80 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR1 - 90
pcr1.90.inst <- subset(temp.prod, Test=='PCR1_90')[,c('YearWeek','Target','Instrument','Instrument_avg')]; pcr1.90.inst$Key <- 'Instrument Temperature'; colnames(pcr1.90.inst) <- c('YearWeek','Target','Value','Average','Key')
pcr1.90.err <- subset(temp.prod, Test=='PCR1_90')[,c('YearWeek','Target','Error','Error_avg')]; pcr1.90.err$Key <- 'Temperature Error'; colnames(pcr1.90.err) <- c('YearWeek','Target','Value','Average','Key')
pcr1.90 <- rbind(pcr1.90.inst, pcr1.90.err)
pcr1.90[,'Target'] <- with(pcr1.90, ifelse(Key=='Temperature Error', NA, Target))
p.pcr1.90 <- ggplot(pcr1.90, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=pcr1.90, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=pcr1.90, color='black') + geom_hline(aes(yintercept=Target), color='black', data=pcr1.90, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 90 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR2 - 50
PCR2.50.inst <- subset(temp.prod, Test=='PCR2_50')[,c('YearWeek','Target','Instrument','Instrument_avg')]; PCR2.50.inst$Key <- 'Instrument Temperature'; colnames(PCR2.50.inst) <- c('YearWeek','Target','Value','Average','Key')
PCR2.50.err <- subset(temp.prod, Test=='PCR2_50')[,c('YearWeek','Target','Error','Error_avg')]; PCR2.50.err$Key <- 'Temperature Error'; colnames(PCR2.50.err) <- c('YearWeek','Target','Value','Average','Key')
PCR2.50 <- rbind(PCR2.50.inst, PCR2.50.err)
PCR2.50[,'Target'] <- with(PCR2.50, ifelse(Key=='Temperature Error', NA, Target))
p.pcr2.50 <- ggplot(PCR2.50, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=PCR2.50, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=PCR2.50, color='black') + geom_hline(aes(yintercept=Target), color='black', data=PCR2.50, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 50 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR2 - 60
PCR2.60.inst <- subset(temp.prod, Test=='PCR2_60')[,c('YearWeek','Target','Instrument','Instrument_avg')]; PCR2.60.inst$Key <- 'Instrument Temperature'; colnames(PCR2.60.inst) <- c('YearWeek','Target','Value','Average','Key')
PCR2.60.err <- subset(temp.prod, Test=='PCR2_60')[,c('YearWeek','Target','Error','Error_avg')]; PCR2.60.err$Key <- 'Temperature Error'; colnames(PCR2.60.err) <- c('YearWeek','Target','Value','Average','Key')
PCR2.60 <- rbind(PCR2.60.inst, PCR2.60.err)
PCR2.60[,'Target'] <- with(PCR2.60, ifelse(Key=='Temperature Error', NA, Target))
p.pcr2.60 <- ggplot(PCR2.60, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=PCR2.60, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=PCR2.60, color='black') + geom_hline(aes(yintercept=Target), color='black', data=PCR2.60, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 60 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR2 - 70
PCR2.70.inst <- subset(temp.prod, Test=='PCR2_70')[,c('YearWeek','Target','Instrument','Instrument_avg')]; PCR2.70.inst$Key <- 'Instrument Temperature'; colnames(PCR2.70.inst) <- c('YearWeek','Target','Value','Average','Key')
PCR2.70.err <- subset(temp.prod, Test=='PCR2_70')[,c('YearWeek','Target','Error','Error_avg')]; PCR2.70.err$Key <- 'Temperature Error'; colnames(PCR2.70.err) <- c('YearWeek','Target','Value','Average','Key')
PCR2.70 <- rbind(PCR2.70.inst, PCR2.70.err)
PCR2.70[,'Target'] <- with(PCR2.70, ifelse(Key=='Temperature Error', NA, Target))
p.pcr2.70 <- ggplot(PCR2.70, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=PCR2.70, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=PCR2.70, color='black') + geom_hline(aes(yintercept=Target), color='black', data=PCR2.70, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 70 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR2 - 80
PCR2.80.inst <- subset(temp.prod, Test=='PCR2_80')[,c('YearWeek','Target','Instrument','Instrument_avg')]; PCR2.80.inst$Key <- 'Instrument Temperature'; colnames(PCR2.80.inst) <- c('YearWeek','Target','Value','Average','Key')
PCR2.80.err <- subset(temp.prod, Test=='PCR2_80')[,c('YearWeek','Target','Error','Error_avg')]; PCR2.80.err$Key <- 'Temperature Error'; colnames(PCR2.80.err) <- c('YearWeek','Target','Value','Average','Key')
PCR2.80 <- rbind(PCR2.80.inst, PCR2.80.err)
PCR2.80[,'Target'] <- with(PCR2.80, ifelse(Key=='Temperature Error', NA, Target))
p.pcr2.80 <- ggplot(PCR2.80, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=PCR2.80, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=PCR2.80, color='black') + geom_hline(aes(yintercept=Target), color='black', data=PCR2.80, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 80 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
# PCR2 - 90
PCR2.90.inst <- subset(temp.prod, Test=='PCR2_90')[,c('YearWeek','Target','Instrument','Instrument_avg')]; PCR2.90.inst$Key <- 'Instrument Temperature'; colnames(PCR2.90.inst) <- c('YearWeek','Target','Value','Average','Key')
PCR2.90.err <- subset(temp.prod, Test=='PCR2_90')[,c('YearWeek','Target','Error','Error_avg')]; PCR2.90.err$Key <- 'Temperature Error'; colnames(PCR2.90.err) <- c('YearWeek','Target','Value','Average','Key')
PCR2.90 <- rbind(PCR2.90.inst, PCR2.90.err)
PCR2.90[,'Target'] <- with(PCR2.90, ifelse(Key=='Temperature Error', NA, Target))
p.pcr2.90 <- ggplot(PCR2.90, aes(x=YearWeek, y=Value)) + geom_point(color='darkgrey') + geom_point(aes(x=YearWeek, y=Average), data=PCR2.90, color='blue', size=2) + geom_line(aes(x=YearWeek, y=Average, group=1), data=PCR2.90, color='black') + geom_hline(aes(yintercept=Target), color='black', data=PCR2.90, size=1.5) + scale_x_discrete(breaks=dateBreaks) + theme(text=element_text(size=20, face=faceFont), axis.text=element_text(color='black'), axis.text.x=element_text(angle=90, hjust=1)) + labs(title='Temperature Calibration in Instrument Production\nPCR 1 at 90 Degrees', x='Year-Week', y='Individual Values, Weekly Average') + facet_wrap(~Key, ncol=1, scale ='free_y')
setwd(imgDir)
png('image0.png',width=1200,height=800,units='px')
print(p.optics.lp)
dev.off()
png('image1.png',width=1200,height=800,units='px')
print(p.sealbar.fluke)
dev.off()
png('image2.png',width=1200,height=800,units='px')
print(p.sealbar.int)
dev.off()
png('image3.png',width=1200,height=800,units='px')
print(p.sealbar.slope)
dev.off()
png('image4.png',width=1200,height=800,units='px')
print(p.pcr1.50)
dev.off()
png('image5.png',width=1200,height=800,units='px')
print(p.pcr1.60)
dev.off()
png('image6.png',width=1200,height=800,units='px')
print(p.pcr1.70)
dev.off()
png('image7.png',width=1200,height=800,units='px')
print(p.pcr1.80)
dev.off()
png('image8.png',width=1200,height=800,units='px')
print(p.pcr1.90)
dev.off()
png('image9.png',width=1200,height=800,units='px')
print(p.pcr2.50)
dev.off()
png('image10.png',width=1200,height=800,units='px')
print(p.pcr2.60)
dev.off()
png('image11.png',width=1200,height=800,units='px')
print(p.pcr2.70)
dev.off()
png('image12.png',width=1200,height=800,units='px')
print(p.pcr2.80)
dev.off()
png('image13.png',width=1200,height=800,units='px')
print(p.pcr2.90)
dev.off()
# Create the pdf
setwd(pdfDir)
pdf("InstrumentCalibration.pdf", width=11, height=8)
print(p.optics.lp)
print(p.sealbar.fluke)
print(p.sealbar.int)
print(p.sealbar.slope)
print(p.pcr1.50)
print(p.pcr1.60)
print(p.pcr1.70)
print(p.pcr1.80)
print(p.pcr1.90)
print(p.pcr2.50)
print(p.pcr2.60)
print(p.pcr2.70)
print(p.pcr2.80)
print(p.pcr2.90)
dev.off()
rm(list=ls())
setwd('~')
shiny::runApp('Coursera/DataProducts/app')
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
rx.df$Key <- 'TopPrescriptions'
rx.df <- rx.df[rx.df$Year < 2014, ]
setwd('~/Coursera/DataProducts/app')
library(shiny)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
rx.df$Key <- 'TopPrescriptions'
rx.df <- rx.df[rx.df$Year < 2014, ]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.in.df$Key <- 'InPatient'
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
med.out.df$Key <- 'OutPatient'
source('outputCareCategories.R')
runApp()
a <- with(data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending), Key = c(med.in.df$Key, med.out.df$Key, rx.df$Key)), aggregate(Spending~Year+Key, FUN=sum))
b <- with(med.in.df, aggregate(Average.Medicare.Payments~Year+Provider.State+Category, FUN=sum))
c <- with(med.out.df, aggregate(Average.Total.Payments~Year+Provider.State+Category, FUN=sum))
d <- with(rx.df, aggregate(Total.Spending~Year+Category), FUN=sum)
d <- with(rx.df, aggregate(Total.Spending~Year+Category, FUN=sum))
head(a)
a
chart <- gvisBarChart(a, xvar='Year', yvar='Spending')
plot(chart)
rm(chart)
head(a)
head(med.in.df)
with(med.in.df, aggregate(Average.Medicare.Payments~Year, FUN=sum))
merge(with(med.in.df, aggregate(Average.Medicare.Payments~Year, FUN=sum)),with(med.out.df, aggregate(Average.Total.Payments~Year, FUN=sum)), by='Year')
merge(merge(with(med.in.df, aggregate(Average.Medicare.Payments~Year, FUN=sum)),with(med.out.df, aggregate(Average.Total.Payments~Year, FUN=sum)), by='Year'), with(rx.df, aggregate(Total.Spending~Year, FUN=sum)), by='Year')
a <- merge(merge(with(med.in.df, aggregate(Average.Medicare.Payments~Year, FUN=sum)),with(med.out.df, aggregate(Average.Total.Payments~Year, FUN=sum)), by='Year'), with(rx.df, aggregate(Total.Spending~Year, FUN=sum)), by='Year')
head(a)
a
gvisBarChart(a, xvar='Year', yvar=c('Average.Medicare.Payments','Average.Total.Payments','Total.Spending'))
chart <- gvisBarChart(a, xvar='Year', yvar=c('Average.Medicare.Payments','Average.Total.Payments','Total.Spending'))
plot(chart)
chart <- gvisBarChart(a, xvar='Year', yvar=c('Average.Medicare.Payments','Average.Total.Payments','Total.Spending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE))
plot(chart)
head(med.out.df)
head(med.in.df)
head(med.in.df)
head(med.out.df)
head(med.in.df)
med.in.df$Total.Discharges*med.in.df$Average.Medicare.Payments
head(med.in.df)
rx.df$PrescriptionSpending <- rx.df$Total.Spending
med.in.df$InPatientSpending <- with(med.in.df, Total.Discharges*Average.Medicare.Payments)
head(med.out.df)
med.in.df$InPatientSpending <- with(med.in.df, Total.Discharges*Average.Medicare.Payments)
med.out.df$OutPatientSpending <- with(med.out.df, Outpatient.Services*Average.Total.Payments)
merge(merge(with(med.in.df, aggregate(InPatientSpending~Year, FUN=sum)),with(med.out.df, aggregate(OutPatientSpending~Year, FUN=sum)), by='Year'), with(rx.df, aggregate(PrescriptionSpending~Year, FUN=sum)), by='Year')
a <- merge(merge(with(med.in.df, aggregate(InPatientSpending~Year, FUN=sum)),with(med.out.df, aggregate(OutPatientSpending~Year, FUN=sum)), by='Year'), with(rx.df, aggregate(PrescriptionSpending~Year, FUN=sum)), by='Year')
chart <- gvisBarChart(a, xvar='Year', yvar=c('Average.Medicare.Payments','Average.Total.Payments','Total.Spending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE))
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE))
plot(chart)
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom'))
plot(chart)
chart <- gvisBarChart(a, yvar='Year', xvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom'))
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', chartArea='{left:250,top:50,width='50%',height='75%'}'))
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', chartArea='{left:250, top:50, width:'50%',height:'75%'}'))
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', chartArea='{left:250, top:50, width:50, height:75}'))
plot(chart)
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', vAxis="{format:'####'}"))
plot(chart)
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', vAxis="[{format:'####'},{ticks:[2011,2012,2013]}]"))
plot(chart)
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', vAxis="{format:'####'}"))
plot(chart)
a
class(a$Year)
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', vAxis="{format:'####',ticks:[2011,2012,2013]}"))
plot(chart)
chart
plot(chart)
chart <- gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', vAxis="{format:'####',ticks:[2011,2012,2013]}", hAxis="{format:'$###,###,###'}"))
plot(chart)
head(b)
gvisGeoChart(b, locationvar = 'Provider.State', colorvar='Year', sizevar='Average.Medicate.Payments')
gvisGeoChart(b, locationvar = 'Provider.State', colorvar='Average.Medicate.Payments', options=list(region='US', displayMode='regions', resolution='provinces'))
gvisGeoChart(subset(b, Category=='acute mycardial infarction, discharged alive'), locationvar = 'Provider.State', colorvar='Average.Medicate.Payments', options=list(region='US', displayMode='regions', resolution='provinces'))
mapChart <- gvisGeoChart(subset(b, Category=='acute mycardial infarction, discharged alive'), locationvar = 'Provider.State', colorvar='Average.Medicate.Payments', options=list(region='US', displayMode='regions', resolution='provinces'))
plot(mapChart)
library(RCurl)
url <- "https://raw.githubusercontent.com/mages/diesunddas/master/Data/US%20Presidential%20Elections.csv"
dat <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
dat <- read.csv(text=dat)
head(dat)
datminmax = data.frame(state=rep(c("Min", "Max"),21),
demVote=rep(c(0, 100),21),
year=sort(rep(seq(1932,2012,4),2)))
head(datminmax)
dat <- rbind(dat[,1:3], datminmax)
head(dat)
subset(dat, year == 1932)
m <- subset(dat, year == 1932)
gvisGeoChart(m,
locationvar="state", colorvar="demVote",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
mapChart <- gvisGeoChart(m,
locationvar="state", colorvar="demVote",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
plot(mapChart)
mapChart <- gvisGeoChart(m,
locationvar="state", colorvar="demVote",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
m
b
View(b)
b <- b[with(b, order(Year, Provider.State, Category)), ]
mapChart <- gvisGeoChart(subset(b, Category=='red blood cell disorders' & Year==2011),
locationvar="state", colorvar="Average.Medicare.Payments",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
mapChart <- gvisGeoChart(subset(b, Category=='red blood cell disorders' & Year==2011),
locationvar="Provider.State", colorvar="Average.Medicare.Payments",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
plot(mapChart)
url <- 'http://www.census.gov/popest/data/state/asrh/2015/files/SCPRC-EST2015-18+POP-RES.csv'
dat <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
dat <- read.csv(text=dat)
head(dat)
dat
state.abb
state
state.name
state.summary <- rbind(state.abb, state.name)
state.summary
state.summary <- cbind(state.abb, state.name)
state.summary
state.summary <- data.frame(StateAbb = state.abb, StateName = state.name)
state.summary
head(state.summary)
head(pop)
url <- 'http://www.census.gov/popest/data/state/asrh/2015/files/SCPRC-EST2015-18+POP-RES.csv'
pop <- getURL(url, ssl.verifypeer=0L, followlocation=1L)
pop <- read.csv(text=pop)
head(pop)
merge(state.summary, pop, by.x='StateName', by.y='NAME')
pop <- merge(state.summary, pop, by.x='StateName', by.y='NAME')
head(b)
m
mapChart <- gvisGeoChart(subset(b, Category=='red blood cell disorders' & Year==2011),
locationvar="Provider.State", colorvar="Average.Medicare.Payments",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
head(b)
rm(a,b,c,d,m)
rm(mapChart)
with(med.in.df, aggregate(Average.Medicare.Payments~Year+Provider.State+Category, FUN=sum))
))     head(med.in.df)
head(med.in.df)
with(med.in.df, aggregate(InPatientSpending~Year+Provider.State+Category, FUN=sum))
m <- with(med.in.df, aggregate(InPatientSpending~Year+Provider.State+Category, FUN=sum))
head(m)
mapChart <- gvisGeoChart(subset(m, Category=='red blood cell disorders' & Year==2011),
locationvar="Provider.State", colorvar="InPatientSpending",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
plot(mapChart)
head(m)
head(pop)
merge(m, pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbbv')
merge(m, pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbb')
m <- merge(m, pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbb')
head(m)
with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum))
head(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)))
head(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)))
merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[c,('StateAbb','POPEST18PLUS2015'), by.x='Provider.State', by.y='StateAbb']
merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[c,('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbb')
merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbb')
head(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.)y='StateAbb')
head(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbb'))
head(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','POPEST18PLUS2015')], by.x='Provider.State', by.y='StateAbb'))
colnames(pop)[grep('POPEST18PLUS2015', colnames(pop))]
colnames(pop)[grep('POPEST18PLUS2015', colnames(pop))] <- 'Population'
head(merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb'))
head(med.out.df)
rm(mapChart, m)
with(rx.df, aggregate(PrescriptionSpending~Year+Category, FUN=sum))
a <- merge(merge(with(med.in.df, aggregate(InPatientSpending~Year, FUN=sum)),with(med.out.df, aggregate(OutPatientSpending~Year, FUN=sum)), by='Year'), with(rx.df, aggregate(PrescriptionSpending~Year, FUN=sum)), by='Year')
gvisBarChart(a, xvar='Year', yvar=c('InPatientSpending','OutPatientSpending','PrescriptionSpending'), options = list(title='High-level Summary of Medicare Spending', isStacked=TRUE, legend='bottom', vAxis="{format:'####',ticks:[2011,2012,2013]}", hAxis="{format:'$###,###,###'}"))
plot(chart)
b <- merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
head(b)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
b <- merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
head(b)
head(a)
gvisTable(a)
plot(gvisTable(a))
gvisTable(a, options = list(width=1200), formats=list(Year='####',InPatientSpending='$###,###,###',OutPatientSpending='$###,###,###',PrescriptionSpending='$###,###,###'))
plot(gvisTable(a, options = list(width=1200), formats=list(Year='####',InPatientSpending='$###,###,###',OutPatientSpending='$###,###,###',PrescriptionSpending='$###,###,###')))
head(b)
mapChart <- gvisGeoChart(subset(b, Category=='transient ischemia'),
locationvar="Provider.State", colorvar="InPatientSpending/Population",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
subset(b, Category=='transient ischemia')
mapChart <- gvisGeoChart(subset(b, Category=='transient ischemia'),
locationvar="Provider.State", colorvar="InPatientSpending",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
plot(mapChart)
merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
b <- merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
head(b)
runApp()
head(b)
b <- merge(with(med.in.df, aggregate(InPatientSpending~Provider.State+Category, FUN=sum)), pop[,c('StateAbb','Population')], by.x='Provider.State', by.y='StateAbb')
mapChart <- gvisGeoChart(subset(b, Category=='transient ischemia'),
locationvar="Provider.State", colorvar="InPatientSpending",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=500, height=400,
colorAxis="{colors:['#FFFFFF', '#0000FF']}"
))
plot(mapChart)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(b)
runApp()
runApp()
head(b)
gvisBubbleChart(b, idvar='Category', xvar='Population', yvar='InPatientSpending', colorvar='Provider.State', sizevar='InPatientSpending')
plot(gvisBubbleChart(b, idvar='Category', xvar='Population', yvar='InPatientSpending', colorvar='Provider.State', sizevar='InPatientSpending'))
runApp()
class(b$Category)
runApp()
runApp()
runApp()
runApp()
runApp()
head(b)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tail(b)
runApp()
subset(b, Category == 'transient ischemia')
outputCareCategories(med.in.df)
head(b)
as.character(unique(b$Category))
