install.packages("googleVis")
library(shiny)
library(googleVis)
setwd('~/Coursera/DataProducts/')
setwd('~/Coursera/DataProducts/app')
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
head(rx.df)
library(ggplot2)
ggplot(rx.df, aes(x=Year, y=Total.Spending, color=Indication, size=Beneficiary.Count)) + geom_point()
head(rx.df)
head(rx.df)
max(rx.df$Unit.Count)
max(as.character(rx.df$Unit.Count))
max(as.numeric(as.character(rx.df$Unit.Count)))
as.character(rx.df$Unit.Count))
as.character(rx.df$Unit.Count)
71,000,203
as.character(rx.df$Unit.Count)
paste(as.character(rx.df$Unit.Count), collapse=',')
strplit(as.character(rx.df$Unit.Count),',')
strsplit(as.character(rx.df$Unit.Count),',')
paste(strsplit(as.character(rx.df$Unit.Count),','),collapse=' ')
strsplit(as.character(rx.df$Unit.Count),',')
gsub(rx.df$Unit.Count)
gsub(pattern = ',', '', as.character(rx.df$Unit.Count))
as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
head(rx.df)
class(rx.df$Unit.Count)
head(rx.df)
class(rx.df$Total.Spending)
gsub(',','', as.character(rx.df$Total.Spending))
gsub('$','',gsub(',','', as.character(rx.df$Total.Spending)))
gsub('$','',gsub(',','', as.character(rx.df$Total.Spending)))
gsub('$','',gsub(',','', as.character(rx.df$Total.Spending)))
substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100)
as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
liste.files()
list.files()
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ',')
head(med.in.11)
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ',')
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ',')
head(med.in.13)
head(med.in.12)
med.in.df <- rbind(med.in.11[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
head(med.in.df)
read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ',')
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ',')
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ',')
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ',')
head(med.out.11)
med.out.11[,c('APC, Provider.State','Outpatient.Services','Average.Total.Payments')]
med.out.df <- rbind(med.out.11[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
head(rx.df)
head(med.in.df)
head(med.out.df)
head(rx.df)
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
head(med.in.11)
med.in.11$Year <- 2011
med.in.12$Year <- 2012
med.in.13$Year <- 2013
med.out.11$Year <- 2011
med.out.12$Year <- 2012
med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
head(med.out.df)
head(med.in.df)
head(rx.df)
head(med.in.df)
as.character(unique(med.in.df$DRG.Definition))
gregexpr(' W',as.character(unique(med.in.df$DRG.Definition)))
gregexpr(' W',as.character(unique(med.in.df$DRG.Definition)))
regexpr(' W',as.character(unique(med.in.df$DRG.Definition)))
as.character(unique(med.in.df$DRG.Definition))
regexpr(' W',as.character(unique(med.in.df$DRG.Definition)))
regexpr(' W',as.character(unique(med.in.df$DRG.Definition)))[1]
regexpr(' W',as.character(unique(med.in.df$DRG.Definition)))[[1]]
regexpr(' W',as.character(unique(med.in.df$DRG.Definition)))$match.length
substr(as.character(med.in.df$DRG.Definition), 5, regexpr(' W',as.character(med.in.df$DRG.Definition)))
substr(as.character(med.in.df$DRG.Definition), 7, regexpr(' W',as.character(med.in.df$DRG.Definition)))
substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))
med.in.df$Category <- substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))
head(med.in.df)
View(med.in.df)
med.in.df[med.in.df$Category == '', ]
ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0, substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1)), substr(as.character(med.in.df$DRG.Definition), 7, 100))
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1)),
substr(as.character(med.in.df$DRG.Definition), 7, 100))
head(med.out.df)
as.character(unique(med.out.df$APC))
regexpr('Level',as.character(med.out.df$APC))
substr(as.character(med.out.df$APC)), regexpr('Level',as.character(med.out.df$APC)), 100)
substr(as.character(med.out.df$APC), regexpr('Level',as.character(med.out.df$APC)), 100)
substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+5), 100)
substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100)
regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))
substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100)))
substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100)), 100)
substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), ((regexpr('Level',as.character(med.out.df$APC))+6), 100)) + 1), 100)
substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100)), 100)
substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100)
med.out.df$Category <- substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100)
View(med.out.df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(med.out.df)
head(med.in.df)
tolower(med.in.df$Category)
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
to.lower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
head(med.in.df)
head(med.out.df)
source('outputCareCategories.R')
source('~/Coursera/DataProducts/app/outputCareCategories.R', echo=TRUE)
runApp()
rm(ouputCareCategories())
rm(ouputCareCategories
)
outputCareCategories(med.in.df)
outputCareCategories(med.out.df)
runApp()
source('~/Coursera/DataProducts/app/outputCareCategories.R', echo=TRUE)
shiny::runApp()
install.packages('googleVis')
runApp()
setwd('~/Documents/Coursera Data Science/DataProducts/app/')
# load the necessary packages
library(shiny)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = '  ,'); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.o
source('outputCareCategories.R')
head(med.out.df)
med.out.11$Year <- 2011
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
source('outputCareCategories.R')
runApp()
