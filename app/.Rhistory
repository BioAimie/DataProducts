ggplot(mtcars, aes(x=factor(am), y=mpg, color=factor(am), group=1)) + geom_point() + geom_line(aes(x=am, y=predict(lm(mpg~am, data=mtcars))), color='black', size=2) + scale_color_manual(values=c('darkgeen','dodgerblue'), guide=FALSE) + scale_x_discrete(breaks=c(0,1), labels=c('Automatic','Manual'))
ggplot(mtcars, aes(x=factor(am), y=mpg, color=factor(am), group=1)) + geom_point() + geom_line(aes(x=am, y=predict(lm(mpg~am, data=mtcars))), color='black', size=2) + scale_color_manual(values=c('darkgreen','dodgerblue'), guide=FALSE) + scale_x_discrete(breaks=c(0,1), labels=c('Automatic','Manual'))
ggplot(mtcars, aes(x=factor(am), y=mpg, color=factor(am), group=1)) + geom_point() + geom_line(aes(x=factor(am), y=predict(lm(mpg~factor(am), data=mtcars))), color='black', size=2) + scale_color_manual(values=c('darkgreen','dodgerblue'), guide=FALSE) + scale_x_discrete(breaks=c(0,1), labels=c('Automatic','Manual'))
ggplot(mtcars, aes(x=factor(am), y=mpg, color=factor(am), group=1)) + geom_point() + geom_line(aes(x=factor(am), y=predict(lm(mpg~factor(am), data=mtcars))), color='black', size=2) + scale_color_manual(values=c('darkgreen','dodgerblue'), guide=FALSE) + scale_x_discrete(breaks=c(0,1), labels=c('Automatic','Manual')) + labs(title='Figure 2:\n Single-Variable Regression of MPG by Transmission Type', x='Transmission Type', y='Miles per Gallon (MPG)')
df <- mtcars
df
relevel(df$am, 1)
relevel(factor(df[,'am']), 1)
df$am <- relevel(factor(df[,'am']), 1)
mtcars$am <- relevel(factor(mtcars$am), 1)
t.test(mtcars[mtcars$am==0,'mpg'], mtcars[mtcars$am==1,'mpg'], alternative = "greater", conf.level = 0.99)
anova(fit.1, fit.2, fit.3, fit.4)
summary(fit.2)
pairs(mtcars)
ggpairs(mtcars) + labs(title='Figure 3:\nCorrelation between Car Attributes')
ggpairs(mtcars)
ggpairs(mtcars) + labs(title='Figure 3:\nCorrelation between Car Attributes') + labs(title='Figure 3')
ggpairs(mtcars, diag="blank", title="Figure 3:\nCorrelations of Car Attributes")
library(ggplot2)
library(GGally)
ggpairs(mtcars, diag="blank", title="Figure 3:\nCorrelations of Car Attributes")
?shuttle
install.packages("MASS")
library(MASS)
?shuttle
head(shuttle)
shuttle
head(shuttle)
df <- shuttle
df[,'lander'] <- with(df, ifelse(use=='auto', 1, 0))
head(df)
glm(lander~factor(wind), data=df, family = binomial(link="logit"))
fit.lander <- glm(lander~factor(wind), data=df, family = binomial(link="logit"))
summary(fit.lander)
head(df)
x <- factor(df$lander)
y <- x
rm(x,y)
y <- df$lander
x <- df$wind
glm(y~x, data=df, family = binomial(link="logit"))
fit.lander
fit.lander <- glm(y~x, family=binomial(link="logit"))
summary(fit.lander)
summary(fit.lander)
summary(fit.lander)$coef(x)
summary(fit.lander)$coef
summary(fit.lander)$coef[1]
heads <- summary(fit.lander)$coef[1]
tails <- summary(fit.lander)$coef[2]
exp(heads)
exp(heads)/exp(tails)
exp(heads)
exp(tails)
exp(heads)/(1-exp(heads))
exp(heads)
summary(fit.lander)
coef(fit.lander)
exp(coef(fit.lander))
exp(coef(fit.lander))[1]
exp(coef(fit.lander))[1]-exp(coef(fit.lander))[2]
coef(fit.lander[1])/coef(fit.lander[2])
coef(fit.lander[1])
coef(fit.lander)[1]/coef(fit.lander)[2]
exp(coef(fit.lander)[1]/coef(fit.lander)[2])
exp(fit.lander[1])
exp(fit.lander)[1]
exp(coef(fit.lander)[1])
summary(fit.lander)
coef(fit.lander[2])
coef(fit.lander)[2]
1/coef(fit.lander)[2]
1/exp(coef(fit.lander)[2])
exp(1)
exp2.718/.97
2.718/.97
glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
glm(lander ~ wind - 1, data = df, family = binomial)
fit.lander <- glm(lander ~ wind - 1, data = df, family = binomial)
summary(fit.lander)
exp(coef(fit.lander)[1])
exp(coef(fit.lander)[1])/exp(coef(fit.lander)[2])
unname(exp(coef(fit.lander)[1])/exp(coef(fit.lander)[2]))
head(df)
fit.landmag <- glm(lander~wind+magn-1, family=binomial)
fit.landmag <- glm(lander~wind+magn-1, data=df, family=binomial)
summary(fit.landmag)
summary(fit.landmag)
exp(coef(fit.landmag))
exp(coef(fit.landmag))[1]
exp(coef(fit.landmag))[1]/exp(coef(fit.landmag))[2]
fit.landmag <- glm(I(1-lander)~wind-1, data=df, family=binomial)
fit.minus <- glm(I(1-lander)~wind-1, data=df, family=binomial)
summary(fit.minus)
coef(fit.minus)
coef(fit.lander)
rm(fit.lander, fit.landmag, fit.minus)
rm(fit.trans)
rm(list=ls())
InsectSprays
head(InsectSprays)
glm(count~factor(spray), data=InsectSprays, family=poisson)
glm(count~factor(spray)-1, data=InsectSprays, family=poisson)
fit.spray <- glm(count~factor(spray)-1, data=InsectSprays, family=poisson)
summary(fit.spray)
coef(fit.spray)
coef(fit.spray)[1]/coef(fit.spray)[2]
exp(coef(fit.spray)[1])/exp(coef(fit.spray)[2])
length(InsectSprays[,1])
n <- length(InsectSprays[,1])
rnorm(n)
t <- rnorm(n)
t2 <- t + log(10)
glm(count~factor(spray)+t-1, data=InsectSprays, family = poisson)
fit.t <- glm(count~factor(spray)+t-1, data=InsectSprays, family = poisson)
fit.t2 <- glm(count~factor(spray)+t2-1, data=InsectSprays, family = poisson)
coef(fit.t)
coef(fit.t2)
fit.t <- glm(count~factor(spray)+t, data=InsectSprays, family = poisson)
fit.t2 <- glm(count~factor(spray)+t2, data=InsectSprays, family = poisson)
coef(fit.t)
coef(fit.t2)
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
y
knots <- 0
-sapply(knots,function(knot) (x>knot)*(x-knot))
sapply(knots,function(knot) (x>knot)*(x-knot))
knots
sapply(knots, function(knot) (x>knot)*(x-knot))
x
y
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
cbind(1,x,splineTerms)
x.mat <- cbind(1,x,splineTerms)
lm(y~x.mat-1)
fit <- lm(y~x.mat-1)
predict(fit)
plot(x,y)
lines(x, predict(fit))
5/4
predict(fit)[10]-predict(fit)[6]
(predict(fit)[10]-predict(fit)[6])/5
(predict(fit)[10]-predict(fit)[6])/4
rm(list=ls())
library(ggplot2)
library(GGally)
ggplot(mtcars, aes(x=factor(am), y=mpg, fill=factor(am))) + geom_violin() + scale_x_discrete(breaks=c(0,1), labels=c('Automatic','Manual')) + scale_fill_manual(values=c('darkgreen','dodgerblue'),guide=FALSE) + labs(title='Figure 1:\nDistribution of MPG by Transmission Type', x='Transmission Type', y='Miles per Gallon (MPG)')
library(ggplot2)
library(GGally)
ggpairs(mtcars, diag="blank", title="Figure 3:\nCorrelations of Car Attributes")
fit.1 <- lm(mpg~factor(am), data=mtcars)
fit.2 <- lm(mpg~factor(am)+factor(cyl)+wt+hp, data=mtcars)
fit.3 <- lm(mpg~factor(am)+factor(cyl)+wt+hp+disp+vs, data=mtcars)
fit.4 <- lm(mpg~., data=mtcars)
anova(fit.1, fit.2, fit.3, fit.4)
fit.2
plot(fit.2)
par(mfrow=c(2,2))
plot(fit.2)
par(mfrow=c(2,2))
plot(fit.2, main='Figure 1A:\nDiagnostics of Best Fit Model')
par(mfrow=c(2,2))
plot(fit.2)
N <- 100000
r <- 1/1000
r
r*N
.99(r*N)
.99*(r*N)
N-r*N
(N-r*N)*.99
(N-r*N)*.01
99/(99+999)
install.packages(c("ISLR", "caret"))
install.packages(c("ISLR", "caret"))
install.packages("kernlab")
install.packages("mlbench")
Sonar
library(mlbench)
Sonar
data("Sonar")
Sonar
head(Sonar)
set.seed(998)
rm(fit.1, fit.2, fit.3, fit.4)
library(caret)
library(caret)
install.packages(c("boot", "class", "cluster", "codetools", "digest", "evaluate", "foreign", "formatR", "ggplot2", "gridExtra", "gtable", "Hmisc", "htmltools", "KernSmooth", "knitr", "latticeExtra", "Matrix", "mgcv", "munsell", "nlme", "nnet", "packrat", "Rcpp", "RCurl", "rmarkdown", "rpart", "rstudioapi", "scales", "spatial", "stringi", "survival"))
library(caret)
rm(list=ls())
install.packages(c("ggplot2", "scales", "knitr", "caret"))
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("pbkrtest")
install.packages("pbkrtest", dependencies = TRUE)
install.packages("/Users/afauce11/Downloads/pbkrtest_0.4-6.tar", repos = NULL, type = "source")
```{r loadTrain echo=FALSE}
training <- read.csv('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', sep=',')
cols <- colnames(training)
for(i in 1:length(cols)) { nas <- c(nas, length(training[is.na(training[,cols[i]]), 1])) }
keepCols <- colnames(training)[(which(nas==0))]
training.trim <- training[,keepCols]
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
training.trim <- training.trim[,!(colnames(training.trim)) %in% rid]
cols <- colnames(training.trim)
blanks <- c()
for(i in 1:length(cols)) { blanks <- c(blanks, length(training.trim[training.trim[,cols[i]]=='',1 ])) }
keepCols <- colnames(training.trim)[which(blanks==0)]
training.trim <- training.trim[,keepCols]
cols <- colnames(training)
for(i in 1:length(cols)) { nas <- c(nas, length(training[is.na(training[,cols[i]]), 1])) }
keepCols <- colnames(training)[(which(nas==0))]
training.trim <- training[,keepCols]
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
training.trim <- training.trim[,!(colnames(training.trim)) %in% rid]
cols <- colnames(training.trim)
blanks <- c()
for(i in 1:length(cols)) { blanks <- c(blanks, length(training.trim[training.trim[,cols[i]]=='',1 ])) }
keepCols <- colnames(training.trim)[which(blanks==0)]
training.trim <- training.trim[,keepCols]
cols <- colnames(training)
cols
for(i in 1:length(cols)) { nas <- c(nas, length(training[is.na(training[,cols[i]]), 1])) }
nas <- c()
for(i in 1:length(cols)) { nas <- c(nas, length(training[is.na(training[,cols[i]]), 1])) }
keepCols <- colnames(training)[(which(nas==0))]
training.trim <- training[,keepCols]
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
training.trim <- training.trim[,!(colnames(training.trim)) %in% rid]
cols <- colnames(training.trim)
blanks <- c()
for(i in 1:length(cols)) { blanks <- c(blanks, length(training.trim[training.trim[,cols[i]]=='',1 ])) }
keepCols <- colnames(training.trim)[which(blanks==0)]
training.trim <- training.trim[,keepCols]
head(training.trim)
View(training.trim)
ggplot(training.trim, aes(x=gyros_belt_x, y=gyros_belt_y, color=classe)) + geom_point()
library(ggplot2)
ggplot(training.trim, aes(x=gyros_belt_x, y=gyros_belt_y, color=classe)) + geom_point()
grep('_belt', colnames(training.trim))
colnames(training.trim)[grep('_belt', colnames(training.trim))]
a.cols <- c('classe', colnames(training.trim)[grep('_belt', colnames(training.trim))])
a.cols
a <- training.trim[,a.cols]
head(a)
ggpairs(a, diag='blank')
library(GGally)
ggpairs(a, diag='blank')
View(a)
head(a)
class(a$magnet_belt_x)
View(a)
ggplot(a, aes(x=total_accel_belt, y=magnet_belt_x, color=classe)) + geom_point()
ggplot(a, aes(x=accel_belt_x, y=magnet_belt_x, color=classe)) + geom_point()
ggplot(a, aes(x=magnet_belt_x, y=magnet_belt_x, color=classe)) + geom_point()
ggplot(a, aes(x=magnet_belt_x, y=magnet_belt_y, color=classe)) + geom_point()
ggplot(a, aes(x=magnet_belt_x, y=magnet_belt_y, color=classe)) + geom_point() + facet_wrap(~classe)
ggplot(a, aes(x=roll_belt, y=yaw_belt, color=classe)) + geom_point() + facet_wrap(~classe)
ggplot(a, aes(x=gyros_belt_x, y=accel_belt_x, color=classe)) + geom_point() + facet_wrap(~classe)
ggplot(a, aes(x=gyros_belt_x, y=accel_belt_y, color=classe)) + geom_point() + facet_wrap(~classe)
training <- read.csv('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', sep=',')
cols <- colnames(training)
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
cols <- cols[!(cols %in% rid)]
nas <- c()
for(i in 1:length(cols)) { nas <- c(nas, length(training[is.na(training[,cols[i]]), 1])) }
nas.keepCols <- colnames(training)[(which(nas==0))]
nas.keepCols
nas
colnames(training)[which(nas==0)]
nas==0
colnames(training)[(which(nas==0))]
View(training)
nas.keepCols
for(i in 1:length(cols)) {
nas <- c(nas, length(training[is.na(training[,cols[i]]), 1]))
}
View(training)
nas.keepCols <- colnames(training)[(which(nas!=0))]
nas.keepCols
cols <- colnames(training)
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
nas <- c()
for(i in 1:length(cols)) {
nas <- c(nas, length(training[is.na(training[,cols[i]]), 1]))
}
colnames(training)[(which(nas!=0))]
nas
View(training)
cols <- colnames(training)
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
nas <- c()
for(i in 1:length(cols)) {
nas <- c(nas, length(training[is.na(training[,cols[i]]), 1]))
}
nas.ridCols <- colnames(training)[(which(nas!=0))]
blanks <- c()
for(i in 1:length(cols)) {
blanks <- c(blanks, length(training.trim[training.trim[,cols[i]]=='',1 ]))
}
blank.ridCols <- colnames(training.trim)[which(blanks!=0)]
for(i in 1:length(cols)) {
blanks <- c(blanks, length(training[training[,cols[i]]=='',1 ]))
}
blank.ridCols <- colnames(training)[which(blanks!=0)]
blank.ridCols
cols <- colnames(training)
rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
nas <- c()
for(i in 1:length(cols)) {
nas <- c(nas, length(training[is.na(training[,cols[i]]), 1]))
}
nas.ridCols <- colnames(training)[(which(nas>100))]
blanks <- c()
for(i in 1:length(cols)) {
blanks <- c(blanks, length(training[training[,cols[i]]=='',1 ]))
}
blank.ridCols <- colnames(training)[which(blanks>100)]
rm(nas.keepCols)
nas.ridCols
View(training)
blank.ridCols
rm(rid)
cols <- colnames(training)
noUse.rid <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
nas <- c()
for(i in 1:length(cols)) {
nas <- c(nas, length(training[is.na(training[,cols[i]]), 1]))
}
nas.ridCols <- colnames(training)[(which(nas>100))]
blanks <- c()
for(i in 1:length(cols)) {
blanks <- c(blanks, length(training[training[,cols[i]]=='',1 ]))
}
blank.ridCols <- colnames(training)[which(blanks>100)]
noUse.ridCols <- c('X','user_name','raw_timestamp_part_1','raw_timestamp_part_2','cvtd_timestamp','new_window','num_window')
rm(noUse.rid)
rid <- c(noUse.ridCols, nas.ridCols, blank.ridCols)
training[training[,!(rid)]]
training[training[,!(colnames(training) %in% rid)]]
!(colnames(training) %in% rid)]
!(colnames(training) %in% rid)
training[ ,!(colnames(training) %in% rid)]
training.trim <- training[ ,!(colnames(training) %in% rid)]
in.Training <- createDataPartition(training.trim$classe, p = 0.65, list = FALSE)
library(caret)
set.seed(42)
in.Training <- createDataPartition(training.trim$classe, p = 0.65, list = FALSE)
train.train <- training.trim[in.Training, ]
test.train <- training.trim[-in.Training]
train.train <- training.trim[in.Training, ]
test.train <- training.trim[-in.Training, ]
head(test.train)
train.train
train.test <- training.trim[-in.Training, ]
rm(test.train)
View(train.train)
setwd('~/Documents/Coursera Data Science/DataProducts/app/')
# load the necessary packages
library(shiny)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
source('outputCareCategories.R')
Fruits
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
head(Fruits)
head(rx.df)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Year', yvar='Total.Spending', sizevar='Unit.Count', colorvar='Indication')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Total.Spending', sizevar='Indication', colorvar='Year')
plot(Bubble)
head(rx.df)
rx.df$Total.Spending/rx.df$Unit.Count
rx.df$Unit.Cost <- with(rx.df, ifelse(is.na(Total.Spending/Unit.Count), NA, Total.Spending/Unit.Count)
)
head(rx.df)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Total.Spending', sizevar='Unit.Cost', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Total.Spending', sizevar='Unit.Cost', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Indication', yvar='Unit.Count', sizevar='Total.Spending', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year')
plot(Bubble)
gvisBarChart(rx.df, xvar="Year", yvar="Total.Spending", options=list(isStacked=TRUE))
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Year', yvar='Total.Spending', sizevar='Unit.Count', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Year', yvar='Total.Spending', sizevar='Unit.Count', colorvar='Indication')
plot(Bubble)
gvisScatterChart(rx.df, xvar='Year', yvar='Total.Spending')
gvisScatterChart(rx.df)
gvisAreaChart(rx.df, xvar='Year', yvar='Total.Spending')
plot(gvisAreaChart(rx.df, xvar='Year', yvar='Total.Spending'))
Bubble
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year')
plot(Bubble)
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year', options = list(vAxis.logScale))
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year', options = (vAxis.logScale))
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year', options = list(vAxis.logScale=TRUE))
plot(Bubble)
gvisScatterChart(rx.df)
gvisScatterChart(rx.df)
women
Bubble <- gvisBubbleChart(rx.df, idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year', options = list(vAxis.logScale=TRUE))
plot(Bubble)
gvisScatterChart(rx.df[rx.df$Indication=='Chemotherapy',c('Year','Total.Spending')])
plot(gvisScatterChart(rx.df[rx.df$Indication=='Chemotherapy',c('Year','Total.Spending')]))
Bubble <- gvisBubbleChart(subset(rx.df, Indication=='Chemotherapy'), idvar='Indication', xvar='Unit.Count', yvar='Unit.Cost', sizevar='Total.Spending', colorvar='Year', options = list(vAxis.logScale=TRUE))
plot(Bubble)
Bubble <- gvisBubbleChart(subset(rx.df, Indication=='Chemotherapy'), idvar='Indication', xvar='Year', yvar='Unit.Count', sizevar='Total.Spending', colorvar='Year', options = list(vAxis.logScale=TRUE))
plot(Bubble)
Bubble <- gvisBubbleChart(subset(rx.df, Indication=='Chemotherapy'), idvar='Indication', xvar='Year', yvar='Total.Spending', sizevar='Unit.Spending', colorvar='Year', options = list(vAxis.logScale=TRUE))
Bubble <- gvisBubbleChart(subset(rx.df, Indication=='Chemotherapy'), idvar='Indication', xvar='Year', yvar='Total.Spending', sizevar='Unit.Spending', colorvar='Year')
head(rx.df)
rx.df[,1L4]
rx.df[,1:4]
rx.dfrx.df[,1:4]
rx.df <- rx.df[,1:4]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
head(rx.df)
outputCareCategories(rx.df)
runApp()
runApp()
head(med.in.df)
rm(list=ls())
# set working directory... take this out when the app goes live
# setwd('~/Coursera/DataProducts/app')
setwd('~/Documents/Coursera Data Science/DataProducts/app/')
# load the necessary packages
library(shiny)
library(googleVis)
# source the data used by the app and do some preliminary cleaning
rx.df <- read.csv('PerscriptionCostsMedicare_2010-2014.csv', header = TRUE, sep = ',')
rx.df$Unit.Count <- as.numeric(gsub(pattern = ',', '', as.character(rx.df$Unit.Count)))
rx.df$Total.Spending <- as.numeric(substr(gsub(',','', as.character(rx.df$Total.Spending)), 2, 100))
rx.df <- rx.df[,c('Year','Indication','Unit.Count','Total.Spending')]
colnames(rx.df)[grep('Indication',colnames(rx.df))] <- 'Category'
med.in.11 <- read.csv('MedicareInpatientCharges2011.csv', header = TRUE, sep = ','); med.in.11$Year <- 2011
med.in.12 <- read.csv('MedicareInpatientCharges2012.csv', header = TRUE, sep = ','); med.in.12$Year <- 2012
med.in.13 <- read.csv('MedicareInpatientCharges2013.csv', header = TRUE, sep = ','); med.in.13$Year <- 2013
med.in.df <- rbind(med.in.11[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.12[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')],
med.in.13[,c('Year','DRG.Definition','Provider.State','Total.Discharges','Average.Medicare.Payments')])
med.in.df$Category <- ifelse(regexpr(' W',as.character(med.in.df$DRG.Definition)) > 0,
tolower(substr(as.character(med.in.df$DRG.Definition), 7, (regexpr(' W',as.character(med.in.df$DRG.Definition))-1))),
tolower(substr(as.character(med.in.df$DRG.Definition), 7, 100)))
med.out.11 <- read.csv('MedicareOutpatientCharges2011.csv', header = TRUE, sep = ','); med.out.11$Year <- 2011
med.out.12 <- read.csv('MedicareOutpatientCharges2012.csv', header = TRUE, sep = ','); med.out.12$Year <- 2012
med.out.13 <- read.csv('MedicareOutpatientCharges2013.csv', header = TRUE, sep = ','); med.out.13$Year <- 2013
med.out.df <- rbind(med.out.11[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.12[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')],
med.out.13[,c('Year','APC','Provider.State','Outpatient.Services','Average.Total.Payments')])
med.out.df$Category <- tolower(substr(substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100), regexpr(' ',substr(as.character(med.out.df$APC), (regexpr('Level',as.character(med.out.df$APC))+6), 100))+1, 100))
source('outputCareCategories.R')
head(med.in.df)
head(med.out.df)
head(rx.df)
data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year))
data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df=Total.Spending))
data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending))
rx.df$Key <- 'TopPrescriptions'
med.in.df$Key <- 'InPatient'
med.out.df$Key <- 'OutPatient'
data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending), Key =c(med.in.df$Key, med.out.df$Key, rx.df$Key))
head(med.out.df)
head(rx.df)
rx.df <- rx.df[rx.df$Year < 2014, ]
a <- with(data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df=Total.Spending)), aggregate(Spending~Year+Key, FUN=sum))
a <- with(data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending)), aggregate(Spending~Year+Key, FUN=sum))
head(med.in.df)
head(med.out.df)
head(rx.df)
with(data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending)), aggregate(Spending~Year+Key, FUN=sum))
a <- with(data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending)), aggregate(Spending~Year+Key, FUN=sum))
data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending), Key = c(med.in.df$Key, med.out.df$Key, rx.df$Key))
a <- data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending), Key = c(med.in.df$Key, med.out.df$Key, rx.df$Key))
head(a)
with(data.frame(Year = c(med.in.df$Year, med.out.df$Year, rx.df$Year), Category = c(med.in.df$Category, med.out.df$Category, rx.df$Category), Spending = c(med.in.df$Average.Medicare.Payments, med.out.df$Average.Total.Payments, rx.df$Total.Spending), Key = c(med.in.df$Key, med.out.df$Key, rx.df$Key)), aggregate(Spending~Year+Key, FUN=sum))
